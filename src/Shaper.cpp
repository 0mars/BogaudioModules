#include "ShaperCore.hpp"

struct Shaper : Module {
	enum ParamIds {
		ATTACK_PARAM,
		ON_PARAM,
		DECAY_PARAM,
		OFF_PARAM,
		ENV_PARAM,
		SIGNAL_PARAM,
		TRIGGER_PARAM,
		SPEED_PARAM,
		LOOP_PARAM,
		NUM_PARAMS
	};

	enum InputIds {
		SIGNAL_INPUT,
		TRIGGER_INPUT,
		NUM_INPUTS
	};

	enum OutputIds {
		SIGNAL_OUTPUT,
		ENV_OUTPUT,
		INV_OUTPUT,
		TRIGGER_OUTPUT,
		NUM_OUTPUTS
	};

	enum LightIds {
		ATTACK_LIGHT,
		ON_LIGHT,
		DECAY_LIGHT,
		OFF_LIGHT,
		NUM_LIGHTS
	};

	ShaperCore _core;
	float lights[NUM_LIGHTS] = {};

	Shaper() : Module(
		NUM_PARAMS,
		NUM_INPUTS,
		NUM_OUTPUTS
	)
	, _core(
		params[ATTACK_PARAM],
		params[ON_PARAM],
		params[DECAY_PARAM],
		params[OFF_PARAM],
		params[ENV_PARAM],
		params[SIGNAL_PARAM],
		params[TRIGGER_PARAM],
		params[SPEED_PARAM],
		params[LOOP_PARAM],

		inputs[SIGNAL_INPUT],
		inputs[TRIGGER_INPUT],
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,

		outputs[SIGNAL_OUTPUT],
		outputs[ENV_OUTPUT],
		outputs[INV_OUTPUT],
		outputs[TRIGGER_OUTPUT],
		NULL,
		NULL,
		NULL,
		NULL,

		lights[ATTACK_LIGHT],
		lights[ON_LIGHT],
		lights[DECAY_LIGHT],
		lights[OFF_LIGHT]
	)
	{
		reset();
	}

	void reset() {
		_core.reset();
	}

	virtual void step() override {
		_core.step();
	}
};


ShaperWidget::ShaperWidget() {
	Shaper *module = new Shaper();
	setModule(module);
	box.size = Vec(RACK_GRID_WIDTH * 10, RACK_GRID_HEIGHT);

	{
		SVGPanel *panel = new SVGPanel();
		panel->box.size = box.size;
		panel->setBackground(SVG::load(assetPlugin(plugin, "res/Shaper.svg")));
		addChild(panel);
	}

	addChild(createScrew<ScrewSilver>(Vec(0, 0)));
	addChild(createScrew<ScrewSilver>(Vec(box.size.x - 15, 0)));
	addChild(createScrew<ScrewSilver>(Vec(0, 365)));
	addChild(createScrew<ScrewSilver>(Vec(box.size.x - 15, 365)));

	// generated by svg_widgets.rb
	auto attackParamPosition = Vec(29.08, 33.08);
	auto triggerParamPosition = Vec(89.04, 43.04);
	auto onParamPosition = Vec(29.08, 89.08);
	auto speedParamPosition = Vec(118.9, 97.9);
	auto decayParamPosition = Vec(29.08, 145.08);
	auto loopParamPosition = Vec(118.9, 153.9);
	auto offParamPosition = Vec(29.08, 201.08);
	auto envParamPosition = Vec(82.38, 257.08);
	auto signalParamPosition = Vec(82.38, 313.08);

	auto triggerInputPosition = Vec(114.0, 40.0);
	auto signalInputPosition = Vec(11.5, 320.0);

	auto triggerOutputPosition = Vec(114.0, 208.0);
	auto envOutputPosition = Vec(11.5, 264.0);
	auto invOutputPosition = Vec(40.5, 264.0);
	auto signalOutputPosition = Vec(40.5, 320.0);

	auto attackLightPosition = Vec(12.0, 80.0);
	auto onLightPosition = Vec(12.0, 121.0);
	auto decayLightPosition = Vec(12.0, 189.0);
	auto offLightPosition = Vec(12.0, 237.0);
	// end generated by svg_widgets.rb

	addParam(createParam<Knob38>(attackParamPosition, module, Shaper::ATTACK_PARAM, 0.0, 1.0, 0.12));
	addParam(createParam<Knob38>(onParamPosition, module, Shaper::ON_PARAM, 0.0, 1.0, 0.32));
	addParam(createParam<Knob38>(decayParamPosition, module, Shaper::DECAY_PARAM, 0.0, 1.0, 0.32));
	addParam(createParam<Knob38>(offParamPosition, module, Shaper::OFF_PARAM, 0.0, 1.0, 0.07));
	addParam(createParam<Knob38>(envParamPosition, module, Shaper::ENV_PARAM, 0.0, 1.0, 1.0));
	addParam(createParam<Knob38>(signalParamPosition, module, Shaper::SIGNAL_PARAM, 0.0, 1.0, 0.5));

	addParam(createParam<Button18>(triggerParamPosition, module, Shaper::TRIGGER_PARAM, 0.0, 1.0, 0.0));
	addInput(createInput<PJ301MPort>(triggerInputPosition, module, Shaper::TRIGGER_INPUT));

	addParam(createParam<CKSS>(speedParamPosition, module, Shaper::SPEED_PARAM, 0.0, 1.0, 1.0));
	addParam(createParam<CKSS>(loopParamPosition, module, Shaper::LOOP_PARAM, 0.0, 1.0, 1.0));
	addOutput(createOutput<PJ301MPort>(triggerOutputPosition, module, Shaper::TRIGGER_OUTPUT));

	addOutput(createOutput<PJ301MPort>(envOutputPosition, module, Shaper::ENV_OUTPUT));
	addOutput(createOutput<PJ301MPort>(invOutputPosition, module, Shaper::INV_OUTPUT));

	addInput(createInput<PJ301MPort>(signalInputPosition, module, Shaper::SIGNAL_INPUT));
	addOutput(createOutput<PJ301MPort>(signalOutputPosition, module, Shaper::SIGNAL_OUTPUT));

	addChild(createValueLight<MicroLight<GreenValueLight>>(attackLightPosition, &module->lights[Shaper::ATTACK_LIGHT]));
	addChild(createValueLight<MicroLight<GreenValueLight>>(onLightPosition, &module->lights[Shaper::ON_LIGHT]));
	addChild(createValueLight<MicroLight<GreenValueLight>>(decayLightPosition, &module->lights[Shaper::DECAY_LIGHT]));
	addChild(createValueLight<MicroLight<GreenValueLight>>(offLightPosition, &module->lights[Shaper::OFF_LIGHT]));
}
