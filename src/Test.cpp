
#include "bogaudio.hpp"
#include "dsp/dsp.hpp"

using namespace bogaudio::dsp;

struct Test : Module {
	enum ParamsIds {
		PARAM1_PARAM,
		PARAM2_PARAM,
		NUM_PARAMS
	};

	enum InputsIds {
		CV1_INPUT,
		CV2_INPUT,
		IN_INPUT,
		NUM_INPUTS
	};

	enum OutputsIds {
		OUT_OUTPUT,
		NUM_OUTPUTS
	};

	enum LightsIds {
		NUM_LIGHTS
	};

	LowPassFilter _lpf;

	Test()
	: Module(NUM_PARAMS, NUM_INPUTS, NUM_OUTPUTS, NUM_LIGHTS)
	, _lpf(44100.0, 1000.0, 1.0)
	{
		reset();
	}

	virtual void reset() override;
	virtual void step() override;
};

void Test::reset() {
}

void Test::step() {
	if (!inputs[IN_INPUT].active || !outputs[OUT_OUTPUT].active) {
		return;
	}

	_lpf.setParams(
		engineGetSampleRate(),
		10000.0 * clampf(params[PARAM1_PARAM].value, 0.0, 1.0),
		std::max(10.0 * clampf(params[PARAM2_PARAM].value, 0.0, 1.0), 0.1)
	);
	outputs[OUT_OUTPUT].value = _lpf.next(inputs[IN_INPUT].value);
}


TestWidget::TestWidget() {
	Test *module = new Test();
	setModule(module);
	box.size = Vec(RACK_GRID_WIDTH * 3, RACK_GRID_HEIGHT);

	{
		SVGPanel *panel = new SVGPanel();
		panel->box.size = box.size;
		panel->setBackground(SVG::load(assetPlugin(plugin, "res/Test.svg")));
		addChild(panel);
	}

	addChild(createScrew<ScrewSilver>(Vec(0, 0)));
	addChild(createScrew<ScrewSilver>(Vec(box.size.x - 15, 365)));

	// generated by svg_widgets.rb
	auto param1ParamPosition = Vec(9.5, 28.5);
	auto param2ParamPosition = Vec(9.5, 128.5);

	auto cv1InputPosition = Vec(10.5, 66.0);
	auto cv2InputPosition = Vec(10.5, 168.0);
	auto inInputPosition = Vec(10.5, 258.0);

	auto outOutputPosition = Vec(10.5, 296.0);
	// end generated by svg_widgets.rb

	addParam(createParam<Knob26>(param1ParamPosition, module, Test::PARAM1_PARAM, 0.0, 1.0, 0.5));
	addParam(createParam<Knob26>(param2ParamPosition, module, Test::PARAM2_PARAM, 0.0, 1.0, 0.5));

	addInput(createInput<Port24>(cv1InputPosition, module, Test::CV1_INPUT));
	addInput(createInput<Port24>(cv2InputPosition, module, Test::CV2_INPUT));
	addInput(createInput<Port24>(inInputPosition, module, Test::IN_INPUT));

	addOutput(createOutput<Port24>(outOutputPosition, module, Test::OUT_OUTPUT));
}
