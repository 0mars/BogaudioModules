
#include "Additator.hpp"

void Additator::onReset() {
	_syncTrigger.reset();
	_phase = -10.0f; // trigger a phase sync.
}

void Additator::onSampleRateChange() {
	_oscillator.setSampleRate(engineGetSampleRate());
	_phase = -10.0f; // trigger a phase sync.
}

void Additator::step() {
	float width = params[WIDTH_PARAM].value;
	float evenWidth = params[EVEN_WIDTH_PARAM].value;
	if (_width != width || evenWidth != _evenWidth) {
		_width = width;
		_evenWidth = evenWidth;

		float multiple = 1.0f;
		_oscillator.setPartialFrequencyRatio(1, multiple);
		for (int i = 2, n = _oscillator.partialCount(); i <= n; ++i) {
			float ii = i;
			if (i % 2 == 0) {
				ii += _evenWidth;
			}
			_oscillator.setPartialFrequencyRatio(i, powf(ii, _width));
		}
	}

	int partials = roundf(params[PARTIALS_PARAM].value);
	float decay = params[DECAY_PARAM].value;
	float oddScale = params[ODD_SCALE_PARAM].value;
	float evenScale = params[EVEN_SCALE_PARAM].value;
	if (_partials != partials || _decay != decay || _oddScale != oddScale || _evenScale != evenScale) {
		_partials = partials;
		_decay = decay;
		_oddScale = oddScale;
		_evenScale = evenScale;

		float as[maxPartials + 1];
		float total = as[1] = 1.0f;
		for (int i = 2, n = _oscillator.partialCount(); i <= n; ++i) {
			as[i] = 0.0f;
			if (i <= _partials) {
				as[i] = 1.0f / powf(i, _decay);
				as[i] *= i % 2 == 1 ? _oddScale : _evenScale;
				total += as[i];
			}
		}
		total /= 3.0f; // pretty arbitrary, this.
		for (int i = 1, n = _oscillator.partialCount(); i <= n; ++i) {
			as[i] /= total;
			_oscillator.setPartialAmplitude(i, as[i]);
		}
	}

	float frequency = params[FREQUENCY_PARAM].value;
	if (inputs[PITCH_INPUT].active) {
		frequency += inputs[PITCH_INPUT].value;
	}
	frequency = clamp(cvToFrequency(frequency), 50.0f, 10000.0f);
	_oscillator.setFrequency(frequency);

	if (_syncTrigger.process(inputs[SYNC_INPUT].value)) {
		_oscillator.syncToPhase(_phase * M_PI / 2.0f);
	}
	float phase = params[PHASE_PARAM].value;
	if (_phase != phase) {
		_phase = phase;
		_oscillator.syncToPhase(phase * M_PI / 2.0f);
	}

	outputs[AUDIO_OUTPUT].value = _oscillator.next() * 5.0;
}

struct AdditatorWidget : ModuleWidget {
	AdditatorWidget(Additator* module) : ModuleWidget(module) {
		box.size = Vec(RACK_GRID_WIDTH * 20, RACK_GRID_HEIGHT);

		{
			SVGPanel *panel = new SVGPanel();
			panel->box.size = box.size;
			panel->setBackground(SVG::load(assetPlugin(plugin, "res/Additator.svg")));
			addChild(panel);
		}

		addChild(Widget::create<ScrewSilver>(Vec(15, 0)));
		addChild(Widget::create<ScrewSilver>(Vec(box.size.x - 30, 0)));
		addChild(Widget::create<ScrewSilver>(Vec(15, 365)));
		addChild(Widget::create<ScrewSilver>(Vec(box.size.x - 30, 365)));

		// generated by svg_widgets.rb
		auto frequencyParamPosition = Vec(40.5, 50.5);
		auto partialsParamPosition = Vec(120.5, 50.5);
		auto widthParamPosition = Vec(200.5, 50.5);
		auto evenWidthParamPosition = Vec(250.5, 56.5);
		auto decayParamPosition = Vec(40.5, 130.5);
		auto oddScaleParamPosition = Vec(120.5, 136.5);
		auto evenScaleParamPosition = Vec(180.5, 136.5);
		auto phaseParamPosition = Vec(170.5, 326.5);

		auto pitchInputPosition = Vec(13.0, 323.0);
		auto syncInputPosition = Vec(53.0, 323.0);

		auto audioOutputPosition = Vec(263.0, 323.0);
		// end generated by svg_widgets.rb

		addParam(ParamWidget::create<Knob38>(frequencyParamPosition, module, Additator::FREQUENCY_PARAM, -5.0, 5.0, 0.0));
		addParam(ParamWidget::create<Knob38>(partialsParamPosition, module, Additator::PARTIALS_PARAM, 1.0, module->maxPartials, module->maxPartials / 2.0f));
		addParam(ParamWidget::create<Knob38>(widthParamPosition, module, Additator::WIDTH_PARAM, 0.0, 2.0, 1.0));
		addParam(ParamWidget::create<Knob26>(evenWidthParamPosition, module, Additator::EVEN_WIDTH_PARAM, -0.99, 0.99, 0.0));
		addParam(ParamWidget::create<Knob38>(decayParamPosition, module, Additator::DECAY_PARAM, -1.0, 3.0, 1.0));
		addParam(ParamWidget::create<Knob26>(oddScaleParamPosition, module, Additator::ODD_SCALE_PARAM, 0.0, 1.0, 1.0));
		addParam(ParamWidget::create<Knob26>(evenScaleParamPosition, module, Additator::EVEN_SCALE_PARAM, 0.0, 1.0, 1.0));
		{
			auto w = ParamWidget::create<Knob26>(phaseParamPosition, module, Additator::PHASE_PARAM, 0.0, 3.0, 0.0);
			dynamic_cast<Knob*>(w)->snap = true;
			addParam(w);
		}

		addInput(Port::create<Port24>(pitchInputPosition, Port::INPUT, module, Additator::PITCH_INPUT));
		addInput(Port::create<Port24>(syncInputPosition, Port::INPUT, module, Additator::SYNC_INPUT));

		addOutput(Port::create<Port24>(audioOutputPosition, Port::OUTPUT, module, Additator::AUDIO_OUTPUT));
	}
};

Model* modelAdditator = Model::create<Additator, AdditatorWidget>("Bogaudio", "Bogaudio-Additator", "Additator");
