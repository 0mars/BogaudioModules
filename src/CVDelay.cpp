
#include "CVDelay.hpp"

void CVDelay::onSampleRateChange() {
	_delay.setSampleRate(engineGetSampleRate());
}

void CVDelay::step() {
	float time = params[TIME_PARAM].value;
	if (inputs[TIME_INPUT].active) {
		time *= clamp(params[TIME_INPUT].value / 10.0f, 0.0f, 1.0f);
	}
	_delay.setTime(time);
	float mix = params[MIX_PARAM].value;
	if (inputs[MIX_INPUT].active) {
		mix *= clamp(inputs[MIX_INPUT].value / 5.0f, -1.0f, 1.0f);
	}
	_mix.setParams(mix);

	float in = inputs[IN_INPUT].value;
	float delayed = _delay.next(in);
	outputs[OUT_OUTPUT].value = _mix.next(in, delayed);
}

struct CVDelayWidget : ModuleWidget {
	CVDelayWidget(CVDelay* module) : ModuleWidget(module) {
		box.size = Vec(RACK_GRID_WIDTH * 3, RACK_GRID_HEIGHT);

		{
			SVGPanel *panel = new SVGPanel();
			panel->box.size = box.size;
			panel->setBackground(SVG::load(assetPlugin(plugin, "res/CVDelay.svg")));
			addChild(panel);
		}

		addChild(Widget::create<ScrewSilver>(Vec(0, 0)));
		addChild(Widget::create<ScrewSilver>(Vec(box.size.x - 15, 365)));

		// generated by svg_widgets.rb
		auto timeParamPosition = Vec(8.0, 36.0);
		auto mixParamPosition = Vec(8.0, 142.0);

		auto timeInputPosition = Vec(10.5, 77.0);
		auto mixInputPosition = Vec(10.5, 183.0);
		auto inInputPosition = Vec(10.5, 233.0);

		auto outOutputPosition = Vec(10.5, 271.0);
		// end generated by svg_widgets.rb

		addParam(ParamWidget::create<Knob29>(timeParamPosition, module, CVDelay::TIME_PARAM, 0.0, 1.0, 0.1));
		addParam(ParamWidget::create<Knob29>(mixParamPosition, module, CVDelay::MIX_PARAM, -1.0, 1.0, 0.0));

		addInput(Port::create<Port24>(timeInputPosition, Port::INPUT, module, CVDelay::TIME_INPUT));
		addInput(Port::create<Port24>(mixInputPosition, Port::INPUT, module, CVDelay::MIX_INPUT));
		addInput(Port::create<Port24>(inInputPosition, Port::INPUT, module, CVDelay::IN_INPUT));

		addOutput(Port::create<Port24>(outOutputPosition, Port::OUTPUT, module, CVDelay::OUT_OUTPUT));
	}
};

Model* modelCVDelay = Model::create<CVDelay, CVDelayWidget>("Bogaudio", "Bogaudio-CVDelay", "CVDelay", DELAY_TAG, UTILITY_TAG);
