
#include "BogaudioModules.hpp"

struct Offset : Module {
	enum ParamIds {
		OFFSET_PARAM,
		ATTEN_PARAM,
		NUM_PARAMS
	};

	enum InputIds {
		OFFSET_INPUT,
		ATTEN_INPUT,
		IN_INPUT,
		NUM_INPUTS
	};

	enum OutputIds {
		OUT_OUTPUT,
		NUM_OUTPUTS
	};

	Offset() : Module(NUM_PARAMS, NUM_INPUTS, NUM_OUTPUTS) {}

  virtual void step() override;

	float knobValue(const Param& knob, const Input& cv) const;
};

void Offset::step() {
	float offset = knobValue(params[OFFSET_PARAM], inputs[OFFSET_INPUT]);
	float atten = knobValue(params[ATTEN_PARAM], inputs[ATTEN_INPUT]);
  if (inputs[IN_INPUT].active) {
		outputs[OUT_OUTPUT].value = clampf(inputs[IN_INPUT].value + 10.0 * offset, -10.0, 10.0) * atten;
	}
	else {
		outputs[OUT_OUTPUT].value = 10.0 * offset * atten;
	}
}

float Offset::knobValue(const Param& knob, const Input& cv) const {
	float v = clampf(knob.value, -1.0, 1.0);
	if (cv.active) {
		v *= clampf(cv.value / 10.0, -1.0, 1.0);
	}
	return v;
}


OffsetWidget::OffsetWidget() {
	Offset *module = new Offset();
	setModule(module);
	box.size = Vec(RACK_GRID_WIDTH * 3, RACK_GRID_HEIGHT);

	{
		SVGPanel *panel = new SVGPanel();
		panel->box.size = box.size;
		panel->setBackground(SVG::load(assetPlugin(plugin, "res/Offset.svg")));
		addChild(panel);
	}

	addChild(createScrew<ScrewSilver>(Vec(0, 0)));
	addChild(createScrew<ScrewSilver>(Vec(box.size.x - 15, 365)));

	// generated by svg_widgets.rb
	auto offsetParamPosition = Vec(7.5, 39.5);
	auto attenParamPosition = Vec(7.5, 151.5);

	auto offsetInputPosition = Vec(10.5, 81.0);
	auto attenInputPosition = Vec(10.5, 193.0);
	auto inInputPosition = Vec(10.5, 243.0);

	auto outOutputPosition = Vec(10.5, 281.0);
	// end generated by svg_widgets.rb

	addParam(createParam<Knob29>(offsetParamPosition, module, Offset::OFFSET_PARAM, -1.0, 1.0, 0.0));
	addParam(createParam<Knob29>(attenParamPosition, module, Offset::ATTEN_PARAM, -1.0, 1.0, 0.0));

	addInput(createInput<PJ301MPort>(offsetInputPosition, module, Offset::OFFSET_INPUT));
	addInput(createInput<PJ301MPort>(attenInputPosition, module, Offset::ATTEN_INPUT));
	addInput(createInput<PJ301MPort>(inInputPosition, module, Offset::IN_INPUT));

	addOutput(createOutput<PJ301MPort>(outOutputPosition, module, Offset::OUT_OUTPUT));
}
