
#include "bogaudio.hpp"

struct Detune : Module {
	enum ParamsIds {
		CENTS_PARAM,
		CENTS_MULTIPLE_PARAM,
		QUANTIZE_PARAM,
		NUM_PARAMS
	};

	enum InputsIds {
		CV_INPUT,
		IN_INPUT,
		NUM_INPUTS
	};

	enum OutputsIds {
		THRU_OUTPUT,
		OUT_PLUS_OUTPUT,
		OUT_MINUS_OUTPUT,
		NUM_OUTPUTS
	};

	enum LightsIds {
		QUANTIZE_LIGHT,
		NUM_LIGHTS
	};

	Detune() : Module(NUM_PARAMS, NUM_INPUTS, NUM_OUTPUTS, NUM_LIGHTS) {
		reset();
	}

	virtual void reset() override;
	virtual void step() override;
};

void Detune::reset() {
}

void Detune::step() {
	lights[QUANTIZE_LIGHT].value = params[QUANTIZE_PARAM].value == 1.0;
}


DetuneWidget::DetuneWidget() {
	Detune *module = new Detune();
	setModule(module);
	box.size = Vec(RACK_GRID_WIDTH * 3, RACK_GRID_HEIGHT);

	{
		SVGPanel *panel = new SVGPanel();
		panel->box.size = box.size;
		panel->setBackground(SVG::load(assetPlugin(plugin, "res/Detune.svg")));
		addChild(panel);
	}

	addChild(createScrew<ScrewSilver>(Vec(0, 0)));
	addChild(createScrew<ScrewSilver>(Vec(box.size.x - 15, 365)));

	// generated by svg_widgets.rb
	auto centsParamPosition = Vec(9.5, 31.5);
	auto centsMultipleParamPosition = Vec(14.5, 82.5);
	auto quantizeParamPosition = Vec(26.9, 144.9);

	auto cvInputPosition = Vec(10.5, 109.0);
	auto inInputPosition = Vec(10.5, 168.0);

	auto thruOutputPosition = Vec(10.5, 206.0);
	auto outPlusOutputPosition = Vec(10.5, 242.0);
	auto outMinusOutputPosition = Vec(10.5, 278.0);

	auto quantizeLightPosition = Vec(21.0, 148.0);
	// end generated by svg_widgets.rb

	{
		auto w = createParam<Knob26>(centsParamPosition, module, Detune::CENTS_PARAM, 0.0, 10.0, 0.0);
		dynamic_cast<Knob*>(w)->snap = true;
		addParam(w);
	}
	{
		auto w = createParam<Knob16>(centsMultipleParamPosition, module, Detune::CENTS_MULTIPLE_PARAM, 1.0, 5.0, 1.0);
		auto k = dynamic_cast<SVGKnob*>(w);
		k->snap = true;
		k->minAngle = -0.5 * M_PI;
		k->maxAngle = 0.5 * M_PI;
		addParam(w);
	}
	addParam(createParam<StatefulButton9>(quantizeParamPosition, module, Detune::QUANTIZE_PARAM, 0.0, 1.0, 1.0));

	addInput(createInput<Port24>(cvInputPosition, module, Detune::CV_INPUT));
	addInput(createInput<Port24>(inInputPosition, module, Detune::IN_INPUT));

	addOutput(createOutput<Port24>(thruOutputPosition, module, Detune::THRU_OUTPUT));
	addOutput(createOutput<Port24>(outPlusOutputPosition, module, Detune::OUT_PLUS_OUTPUT));
	addOutput(createOutput<Port24>(outMinusOutputPosition, module, Detune::OUT_MINUS_OUTPUT));

	addChild(createLight<TinyLight<GreenLight>>(quantizeLightPosition, module, Detune::QUANTIZE_LIGHT));
}
